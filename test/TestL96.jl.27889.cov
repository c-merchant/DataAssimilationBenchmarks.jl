        - ##############################################################################################
        - module TestL96
        - ##############################################################################################
        - ##############################################################################################
        - # imports and exports
        - using DataAssimilationBenchmarks.DeSolvers, DataAssimilationBenchmarks.L96
        - 
        - ##############################################################################################
        - ##############################################################################################
        - # Test the derivative function for known behavior with Euler method,
        - # the initial condiiton of zeros give back h * F in all components
        - 
        1 function EMZerosStep()
        -     # step size
        1     h = 0.01
        -     
        -     # forcing parameter
        1     F = 8.0
        1     dx_params = Dict{String, Array{Float64}}("F" => [F])
        - 
        -     # initial conditions and arguments
       40     x = zeros(40)
        - 
        -     # parameters to test
        1     kwargs = Dict{String, Any}(
        -         "h" => h,
        -         "diffusion" => 0.0,
        -         "dx_params" => dx_params,
        -         "dx_dt" => L96.dx_dt,
        -         )
        - 
        -     # em_step! writes over x in place
        1     em_step!(x, 0.0, kwargs)
        - 
        -     # evaluate test pass/fail if the vector of x is equal to (f*h) in every instance
        1     if sum(x .== (F*h)) == 40
        1         true
        -     else
        0         false
        -     end
        - 
        - end
        - 
        - 
        - ##############################################################################################
        - # Test the derivative function for known behavior with Euler method,
        - # the vector with all components equal to F is a fixed point for the system
        - 
        1 function EMFStep()
        -     # step size
        1     h = 0.01
        -     
        -     # forcing parameter
        1     F = 8.0
        1     dx_params = Dict{String, Array{Float64}}("F" => [F])
        - 
        -     # initial conditions and arguments
       40     x = ones(40)
        1     x = x * F
        - 
        -     # parameters to test
        1     kwargs = Dict{String, Any}(
        -         "h" => h,
        -         "diffusion" => 0.0,
        -         "dx_params" => dx_params,
        -         "dx_dt" => L96.dx_dt,
        -         )
        - 
        -     # em_step! writes over x in place
        1     em_step!(x, 0.0, kwargs)
        - 
        -     # evaluate test pass/fail if the vector of x is equal to (f*h) in every instance
        1     if sum(x .== (F)) == 40
        1         true
        -     else
        0         false
        -     end
        - 
        - end
        - 
        - 
        - ##############################################################################################
        - # end module
        - 
        - end
